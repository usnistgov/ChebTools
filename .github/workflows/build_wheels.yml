name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published
      - edited

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3
      - name: checkout submodules
        run: git submodule update --init --recursive

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.2 build wheel setuptools pipx

      - name: Build sdist
        run: pipx run build --sdist --outdir wheelhouse
        if: runner.os == 'Windows'

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: universal2
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15
          CIBW_SKIP: "*musllinux* *pypy* *pp* *cp36* *cp37* *cp38*"

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.tar.gz

  merge_wheels:
   runs-on: ubuntu-latest
   needs: build_wheels
   steps:
     - name: Merge Artifacts
       uses: actions/upload-artifact/merge@v4
       with:
         name: artifact
         pattern: artifact-*

  upload_python_bindings_to_testpypi:
    needs: [merge_wheels]
    name: Upload to PyPi
    runs-on: ubuntu-latest
    steps:

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.x

      - name: Download ALL wheels
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: Python

      - name: Display structure of downloaded files
        run: |
          set -x
          ls -R
          du -sh

      - name: Upload to testpypi (always)
        env:
          TWINE_NON_INTERACTIVE: true 
          TWINE_USERNAME: __token__ 
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}

        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine requests packaging
          python -m twine upload -r testpypi --skip-existing Python/*.whl Python/*.tar.gz

      - name: Upload to pypi (release)
        env:
          TWINE_NON_INTERACTIVE: true 
          TWINE_USERNAME: __token__ 
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine requests packaging
          python -m twine upload --skip-existing Python/*.whl Python/*.tar.gz

  upload_to_pypi:
    name: Upload to pypi if release
    needs: [merge_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v5

    - uses: actions/download-artifact@v4
      with:
        path: dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}