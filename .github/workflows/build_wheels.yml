name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published
      - edited
      - released

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3
      - name: checkout submodules
        run: git submodule update --init --recursive

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.2 build wheel setuptools pipx twine

      - name: Build sdist
        run: pipx run build --sdist --outdir wheelhouse
        if: runner.os == 'Windows'

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: universal2
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15
          CIBW_SKIP: "*musllinux* *pypy* *pp* *cp36* *cp37* *cp38*"

      - name: Check wheels
        run: python -m twine check wheelhouse/*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.tar.gz

  merge_wheels:
   runs-on: ubuntu-latest
   needs: build_wheels
   steps:
     - name: Merge Artifacts
       uses: actions/upload-artifact/merge@v4
       with:
         name: dist
         pattern: artifact-*

  # upload_python_bindings_to_testpypi:
  #   needs: [merge_wheels]
  #   name: Upload to PyPi
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.12.x

  #     - name: Download ALL wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist

  #     - name: Display structure of downloaded files
  #       run: |
  #         set -x
  #         ls -R
  #         du -sh

  #     - name: Upload to testpypi (always)
  #       env:
  #         TWINE_NON_INTERACTIVE: true 
  #         TWINE_USERNAME: __token__ 
  #         TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}

  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install setuptools wheel twine requests packaging
  #         python -m twine upload -r testpypi --skip-existing dist/*.whl dist/*.tar.gz

  testpypi-publish:
    name: Upload release to TestPyPI
    needs: [merge_wheels]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download ALL wheels
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Display structure of downloaded files
      run: |
        set -x
        ls -R
        du -sh

    - name: Publish package distributions to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1.9
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_TOKEN }}
        skip-existing: true

  pypi-publish:
    name: Upload to pypi if release
    needs: [merge_wheels]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    if: github.event_name == 'release' 
    #&& (github.event.action == 'published' || github.event.action == 'edited')

    steps:
    - uses: actions/setup-python@v5

    - uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Display structure of downloaded files
      run: |
        set -x
        ls -R
        du -sh

    - uses: pypa/gh-action-pypi-publish@release/v1.9
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        skip-existing: false